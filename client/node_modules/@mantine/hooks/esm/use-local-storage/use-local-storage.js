import { useCallback, useState, useEffect } from 'react';
import { useWindowEvent } from '../use-window-event/use-window-event.js';

function serializeJSON(value) {
  try {
    return JSON.stringify(value);
  } catch (error) {
    throw new Error("@mantine/hooks use-local-storage: Failed to serialize the value");
  }
}
function deserializeJSON(value) {
  try {
    return JSON.parse(value);
  } catch (e) {
    return value;
  }
}
function useLocalStorage({
  key,
  defaultValue = void 0,
  getInitialValueInEffect = true,
  deserialize = deserializeJSON,
  serialize = serializeJSON
}) {
  const readLocalStorageValue = useCallback((skipStorage) => {
    if (typeof window === "undefined" || !("localStorage" in window) || skipStorage) {
      return defaultValue != null ? defaultValue : "";
    }
    const storageValue = window.localStorage.getItem(key);
    return storageValue !== null ? deserialize(storageValue) : defaultValue != null ? defaultValue : "";
  }, [key, defaultValue]);
  const [value, setValue] = useState(readLocalStorageValue(getInitialValueInEffect));
  const setLocalStorageValue = useCallback((val) => {
    if (val instanceof Function) {
      setValue((current) => {
        const result = val(current);
        window.localStorage.setItem(key, serialize(result));
        window.dispatchEvent(new CustomEvent("mantine-local-storage", { detail: { key, value: val(current) } }));
        return result;
      });
    } else {
      window.localStorage.setItem(key, serialize(val));
      window.dispatchEvent(new CustomEvent("mantine-local-storage", { detail: { key, value: val } }));
      setValue(val);
    }
  }, [key]);
  useWindowEvent("storage", (event) => {
    var _a;
    if (event.storageArea === window.localStorage && event.key === key) {
      setValue(deserialize((_a = event.newValue) != null ? _a : void 0));
    }
  });
  useWindowEvent("mantine-local-storage", (event) => {
    if (event.detail.key === key) {
      setValue(event.detail.value);
    }
  });
  useEffect(() => {
    if (defaultValue !== void 0 && value === void 0) {
      setLocalStorageValue(defaultValue);
    }
  }, [defaultValue, value, setLocalStorageValue]);
  useEffect(() => {
    if (getInitialValueInEffect) {
      setValue(readLocalStorageValue());
    }
  }, []);
  return [value === void 0 ? defaultValue : value, setLocalStorageValue];
}

export { useLocalStorage };
//# sourceMappingURL=use-local-storage.js.map
